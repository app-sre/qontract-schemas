---
"$schema": /metaschema-1.json
version: "1.0"
type: object
title: "App Interface GraphQL Schemas"
description: |
  Schema for defining GraphQL configurations in app-interface.
  This includes details about GraphQL fields, interfaces, and
  strategies for resolving data.

additionalProperties: false
properties:
  "$schema":
    type: string
    enum:
    - /app-interface/graphql-schemas-1.yml
  confs:
    type: array
    description: |
      A list of GraphQL configurations.
    items:
      "$ref": "#/definitions/conf"

definitions:
  conf:
    type: object
    additionalProperties: false
    description: |
      A configuration for a GraphQL schema, including fields,
      data files, and interface resolution strategies.
    properties:
      name:
        type: string
        description: |
          The name of the GraphQL configuration.
      fields:
        type: array
        description: |
          A list of fields defined in the GraphQL configuration.
        items:
          "$ref": "#/definitions/field"
      datafile:
        type: string
        description: |
          The data file schema associated with the GraphQL configuration.
          This is used in bundle and validation for one-to-one mapping between
          GraphQL configuration (type) and datafile schema.
          If GraphQL type is an interface and all subtypes share the same schema,
          only set this for interface type, not needed for subtypes.
          This is needed for standalone datafile used as crossref `$ref: path_to_data_file`.
          Note this field requires `schema` and `path` in `fields`.
      isInterface:
        type: boolean
        description: |
          Indicates whether this configuration is an interface.
      interface:
        type: string
        description: |
          The name of the interface implemented by this configuration.
      interfaceResolve:
        type: object
        description: |
          The strategy for resolving interfaces in the GraphQL configuration.
        additionalProperties: false
        properties:
          strategy:
            type: string
            description: |
              The strategy used for interface resolution.
              Supported strategies include `fieldMap` and `schema`.
            enum:
            - "fieldMap"
            - "schema"
          field:
            type: string
            description: |
              The field used for interface resolution with fieldMap strategy.
          fieldMap:
            type: object
            description: |
              A mapping of fields for interface resolution.
              Key is the field value from datafile, value is GraphQL type.
            properties:
              "/": {}
        required:
        - strategy
    required:
    - name
    - fields
  field:
    type: object
    additionalProperties: false
    description: |
      A field definition in a GraphQL configuration, including
      its type, uniqueness, and other attributes.
    properties:
      name:
        type: string
        description: |
          The name of the field.
      type:
        type: string
        description: |
          The type of the field.
      isInterface:
        type: boolean
        description: |
          Indicates whether the field is part of an interface.
      isUnique:
        type: boolean
        description: |
          Indicates whether the field is global unique.
          When multiple fields marked as unique, each field is checked individually,
          no duplicate values are allowed for each field.
          This is like unique constraint per field in database.
      isContextUnique:
        type: boolean
        description: |
          Indicates whether the field is unique within an object array.
          When multiple fields marked as context unique, all fields are grouped together to determine uniqueness,
          partial fields duplicate are allowed.
          This is like unique constraint for multiple fields combo in database.
      isRequired:
        type: boolean
        description: |
          Indicates whether the field is required.
      isSearchable:
        type: boolean
        description: |
          Indicates whether the field is searchable.
      isList:
        type: boolean
        description: |
          Indicates whether the field is a list.
      isResource:
        type: boolean
        description: |
          Indicates whether the field represents a resource.
      resolveResource:
        type: boolean
        description: |
          Indicates whether the field resolves a resource.
      synthetic:
        type: object
        description: |
          Synthetic field details, including schema and sub-attributes.
        additionalProperties: false
        properties:
          schema:
            type: string
            description: |
              The schema associated with the synthetic field.
          subAttr:
            type: string
            description: |
              The sub-attribute of the synthetic field.
      datafileSchema:
        type: string
        description: |
          The schema of the data file associated with the field.
          Only used in `Query` fields.
    required:
    - name
    - type
